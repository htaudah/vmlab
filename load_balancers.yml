# Playbook to configure HAProxy load balancers
# Written by: Hani Audah <ht.aramco@gmail.com>
# Created on: Jun/02/2020
# -------------------------------------------------------------------------------------------------
- import_playbook: allocate_host_variables.yml

- hosts: load_balancers
  name: Create and configure the HAProxy load balancer
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_user: root
    ansible_password: "{{ linux_local_password }}"
  tasks:
    - firewalld:
        service: https
        permanent: yes
        immediate: yes
        state: enabled
        zone: public

    - firewalld:
        service: http
        permanent: yes
        immediate: yes
        state: enabled
        zone: public

    - firewalld:
        service: high-availability
        permanent: yes
        immediate: yes
        state: enabled
        zone: public

    - firewalld:
        port: 2001/tcp
        permanent: yes
        immediate: yes
        state: enabled
        zone: public

    - firewalld:
        port: 8443/tcp
        permanent: yes
        immediate: yes
        state: enabled
        zone: public

    - firewalld:
        port: 8444/tcp
        permanent: yes
        immediate: yes
        state: enabled
        zone: public

    - name: Install pacemaker tools
      dnf:
        name:
          - pcs
          - pacemaker
          - fence-agents-all
        enablerepo: ha

    - name: Start up PCS services
      systemd:
        name: pcsd
        state: started
        enabled: yes

    - name: Set the cluster user password on all nodes
      user:
        name: hacluster
        password: "{{ linux_local_password | password_hash('sha512') }}"
        update_password: always

    - name: Create the pacemaker cluster
      community.general.pacemaker_cluster:
        name: lbcluster
        state: online
        nodes:
          - lb01.haramco.org
          - lb02.haramco.org
        pcs_user: hacluster
        pcs_password: "{{ linux_local_password }}"
      run_once: yes

    - name: Create the all-in-one virtual IP resource
      community.general.pacemaker_resource:
        name: VirtualIP-uem_console
        type: ocf:heartbeat:IPaddr2
        attributes:
          ip: "{{ network_subnet }}.{{ virtual_ips['all_in_one'] }}"
          cidr_netmask: "24"
      run_once: yes

    - name: Configure the stonith device
      community.general.pacemaker_stonith_device:
        name: vmfence
        type: fence_vmware_rest
        fencing_options:
          pcmk_host_map: "{{ (groups['load_balancers'] | map('regex_replace', '(.*)', '\\1.' + domain_name + ':' + userid + '-\\1') | join(';')) }}"
          ssl: 1
          ssl_insecure: 1
          ipaddr: "{{ vcenter_hostname }}"
          login: "{{ vcenter_username }}"
          passwd: "{{ vcenter_password }}"
      run_once: yes

    - name: Install HAProxy
      dnf:
        name: haproxy
        state: present

    - name: Transfer HAProxy config
      template:
        src: configurations/haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg

    - name: Allow haproxy to bind any port
      seboolean:
        name: haproxy_connect_any
        state: yes
        persistent: yes

    - name: Create merged certificate private key files
      shell: |
        # Where we expect all the cert files to reside
        CERTPATH={{ item.destination_path }}/{{ item.subject }}.{{ public_domain_name }}
        [ ${CERTPATH}/merged.pem -ot ${CERTPATH}/fullchain.pem ] &&
        [ ${CERTPATH}/merged.pem -ot ${CERTPATH}/privkey.pem ] &&
        cat ${CERTPATH}/fullchain.pem > ${CERTPATH}/merged.pem && cat ${CERTPATH}/privkey.pem >> ${CERTPATH}/merged.pem
        mkdir -p {{ item.destination_path }}/certificates
        cp -f ${CERTPATH}/merged.pem {{ item.destination_path }}/certificates/{{ item.subject }}.{{ public_domain_name }}.pem
      ignore_errors: yes
      loop: "{{ certificates }}"

    - name: Create merged internal certificate private key files
      shell: |
        # Where we expect all the cert files to reside
        CERTPATH=/var/lib/haproxy/{{ item }}.{{ public_domain_name }}
        [ ${CERTPATH}/{{ item }}.key -ot ${CERTPATH}/{{ item }}.pfx ] &&
        openssl pkcs12 -in ${CERTPATH}/{{ item }}.pfx -nodes -nocerts -passin pass:{{ pfx_password }} | sed -ne '/-BEGIN PRIVATE KEY-/,/-END PRIVATE KEY-/p' > ${CERTPATH}/{{ item }}.key
        [ ${CERTPATH}/{{ item }}.pem -ot ${CERTPATH}/{{ item }}.pfx ] &&
        openssl pkcs12 -in ${CERTPATH}/{{ item }}.pfx -nokeys -passin pass:{{ pfx_password }} | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ${CERTPATH}/{{ item }}.pem
        [ ${CERTPATH}/merged.pem -ot ${CERTPATH}/{{ item }}.pem ] &&
        [ ${CERTPATH}/merged.pem -ot ${CERTPATH}/{{ item }}.key ] &&
        cat ${CERTPATH}/{{ item }}.pem > ${CERTPATH}/merged.pem && cat ${CERTPATH}/{{ item }}.key >> ${CERTPATH}/merged.pem
        mkdir -p /var/lib/haproxy/certificates
        cp -f ${CERTPATH}/merged.pem /var/lib/haproxy/certificates/{{ item }}.{{ public_domain_name }}.pem
      ignore_errors: yes
      loop: "{{ internal_certificates }}"

    - name: Start and enable the haproxy service
      systemd:
        name: haproxy
        state: restarted
        enabled: yes
