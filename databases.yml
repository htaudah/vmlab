# Playbook to configure all SQL Servers
# Written by: Hani Audah <ht.aramco@gmail.com>
# Created on: May/29/2020
# -------------------------------------------------------------------------------------------------
- import_playbook: allocate_host_variables.yml

- hosts: databases
  name: Configure SQL Servers
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_connection: winrm
    ansible_user: Administrator
    ansible_password: "{{ win_local_password }}"
    ansible_winrm_transport: ntlm
    ansible_port: 5985
  tasks:
    - include_tasks: join_domain.yml
      vars:
        machine_ou: "{{ server_ou }}"

- hosts: databases
  name: Configure SQL Servers
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_connection: winrm
    ansible_user: Administrator@{{ domain_name }}
    ansible_password: "{{ domain_admin_password }}"
    ansible_winrm_transport: credssp
    ansible_port: 5985
  tasks:
    - name: Get SQL Server installation disc drive letter
      win_shell: Get-CimInstance Win32_LogicalDisk | ?{ $_.DriveType -eq 5 -and $_.VolumeName -eq 'SqlSetup_x64_ENU' } | % {$_.DeviceID}
      register: drive_output

    - name: Install SQL Server from mounted ISO
      win_package:
        path: "{{ drive_output.stdout | trim }}\\setup.exe"
        product_id: '{0FB552DD-543E-48E7-A6F4-2F8D82723C6A}'
        arguments: >-
          /IACCEPTSQLSERVERLICENSETERMS /ACTION="Install" /FEATURES=SQLEngine,Replication,Conn /INSTANCENAME="HARAMCODB"
          /SQLSYSADMINACCOUNTS="Administrator@{{ domain_name }}" /SQLCOLLATION="Latin1_General_CI_AS" /UpdateEnabled=false /QUIET
        state: present

    # The uninstall command is included for your reference only
    #- name: Uninstall SQL Server from mounted ISO
      #win_package:
        #path: D:\setup.exe
        #product_id: '{0FB552DD-543E-48E7-A6F4-2F8D82723C6A}'
        #arguments: >
          #/IACCEPTSQLSERVERLICENSETERMS /ACTION="Uninstall" /FEATURES=SQLEngine,Replication,Conn /INSTANCENAME="HARAMCODB" /qs
        #state: absent

    - name: Create folder for SQL Server Management Studio (SSMS) installer
      win_file:
        path: C:\Installers
        state: directory

    - name: Copy SSMS installer
      win_copy:
        src: \\{{ domain_name }}\Shares\domain\SSMS-Setup-ENU.exe
        dest: C:\Installers\SSMS-Setup-ENU.exe
        remote_src: yes

    - name: Run SSMS installer
      win_package:
        path: C:\Installers\SSMS-Setup-ENU.exe
        product_id: '{0955149F-98EC-4F44-8B05-7B0C8C503DCC}'
        arguments: /Quiet /norestart
        state: present

    - name: Install Failover Clustering feature to form AlwaysOn AG
      win_feature:
        name: Failover-Clustering
        state: present
      register: cluster_feature

    - name: Install Failover Clustering management tools
      win_feature:
        name: RSAT-Clustering
        state: present
      register: cluster_rsat_feature

    - name: Install Failover Clustering PowerShell management tools
      win_feature:
        name: RSAT-Clustering-PowerShell
        state: present

    - name: Install Failover Clustering command line interface
      win_feature:
        name: RSAT-Clustering-CmdInterface
        state: present

    - name: Install Failover Clustering PowerShell module
      win_psmodule:
        name: FailoverClusters
        state: present

    - name: Install DSC module for Windows Cluster management
      win_psmodule:
        name: xFailOverCluster
        state: present

    - name: Create the server cluster
      win_dsc:
        resource_name: xCluster
        Name: dbcluster
        StaticIpAddress: "{{ network_subnet }}.{{ dbcluster_address }}/24"
        DomainAdministratorCredential_username: "Administrator@{{ domain_name }}"
        DomainAdministratorCredential_password: "Administrator@{{ domain_name }}"
      run_once: yes

    - name: Wait for cluster creation to complete
      win_dsc:
        resource_name: xWaitForCluster
        Name: dbcluster

    - name: Join additional nodes to cluster
      win_dsc:
        resource_name: xCluster
        Name: dbcluster
        StaticIpAddress: "{{ network_subnet }}.{{ dbcluster_address }}/24"
        DomainAdministratorCredential_username: "Administrator@{{ domain_name }}"
        DomainAdministratorCredential_password: "Administrator@{{ domain_name }}"

    - name: Add file share witness to cluster
      win_dsc:
        resource_name: xClusterQuorum
        IsSingleInstance: yes
        Type: NodeAndFileShareMajority
        Resource: \\{{ group['file_shares'] | first }}.{{ domain_name }}\witness

    - name: Install DSC module for SQL Server management
      win_psmodule:
        name: SqlServerDsc
        state: present

    - name: Enable SQL AlwaysON
      win_dsc:
        resource_name: SqlAlwaysOnService
        Ensure: Present
        InstanceName: MSSQLSERVER
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
