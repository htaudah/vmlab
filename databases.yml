# Playbook to configure all SQL Servers
# Written by: Hani Audah <ht.aramco@gmail.com>
# Created on: May/29/2020
# -------------------------------------------------------------------------------------------------
- import_playbook: allocate_host_variables.yml

- hosts: databases
  name: Configure SQL Servers
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_connection: winrm
    ansible_user: Administrator
    ansible_password: "{{ win_local_password }}"
    ansible_winrm_transport: ntlm
    ansible_port: 5985
  tasks:
    - include_tasks: join_domain.yml
      vars:
        machine_ou: "{{ server_ou }}"

- hosts: databases
  name: Configure SQL Servers
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_connection: winrm
    ansible_user: Administrator@{{ domain_name }}
    ansible_password: "{{ domain_admin_password }}"
    ansible_winrm_transport: credssp
    ansible_port: 5985
  any_errors_fatal: yes
  tasks:
    - name: Get SQL Server installation disc drive letter
      win_shell: Get-CimInstance Win32_LogicalDisk | ?{ $_.DriveType -eq 5 -and $_.VolumeName -eq 'SqlSetup_x64_ENU' } | % {$_.DeviceID}
      register: drive_output

    - name: Install SQL Server from mounted ISO
      win_package:
        path: "{{ drive_output.stdout | trim }}\\setup.exe"
        product_id: '{0FB552DD-543E-48E7-A6F4-2F8D82723C6A}'
        arguments: >-
          /IACCEPTSQLSERVERLICENSETERMS /ACTION="Install" /FEATURES=SQLEngine,Replication,Conn /INSTANCENAME="{{ db_instance }}"
          /SQLSYSADMINACCOUNTS="Administrator@{{ domain_name }}" /SQLCOLLATION="Latin1_General_CI_AS" /UpdateEnabled=false /QUIET
          /SECURITYMODE="SQL" /SAPWD="{{ database_password }}"
        state: present

    # The uninstall command is included for your reference only
    #- name: Uninstall SQL Server from mounted ISO
      #win_package:
        #path: D:\setup.exe
        #product_id: '{0FB552DD-543E-48E7-A6F4-2F8D82723C6A}'
        #arguments: >
          #/IACCEPTSQLSERVERLICENSETERMS /ACTION="Uninstall" /FEATURES=SQLEngine,Replication,Conn /INSTANCENAME="HARAMCODB" /qs
        #state: absent

    - name: Install DSC module for SQL Server management
      win_psmodule:
        name: SqlServerDsc
        state: present
    
    # NOTE: this module doesn't seem to understand that domain\user and user@domain are identical
    - name: Run database using SQL service account
      win_dsc:
        resource_name: SqlServiceAccount
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        ServiceType: DatabaseEngine
        ServiceAccount_username: '{{ domain_name.split(".") | first }}\dbsvc'
        ServiceAccount_password: "{{ domain_user_password }}"
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - win_firewall_rule:
        name: SQL Server Database Engine
        direction: in
        protocol: tcp
        localport: 1433
        profiles: domain

    - win_firewall_rule:
        name: SQL Server Browser
        direction: in
        protocol: udp
        localport: 1434
        profiles: domain

    - win_firewall_rule:
        name: SQL Server Mirroring Endpoint
        direction: in
        protocol: tcp
        localport: 5022
        profiles: domain

    - name: Enable and start the SQL Server Browser service
      win_service:
        name: SQLBrowser
        state: started
        start_mode: auto

    - name: Create login for database service account
      win_dsc:
        resource_name: SqlLogin
        Ensure: Present
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        Name: '{{ domain_name.split(".") | first }}\dbsvc'
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Set TCP/IP to use standard port
      win_dsc:
        resource_name: SqlProtocolTcpIP
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        IpAddressGroup: IPAll
        TcpPort: '1433'
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Enable TCP/IP protocol
      win_dsc:
        resource_name: SqlProtocol
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        ProtocolName: TcpIp
        Enabled: yes
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Create folder for SQL Server Management Studio (SSMS) installer
      win_file:
        path: C:\Installers
        state: directory

    - name: Copy SSMS installer
      win_copy:
        src: \\{{ domain_name }}\Shares\domain\SSMS-Setup-ENU.exe
        dest: C:\Installers\SSMS-Setup-ENU.exe
        remote_src: yes

    - name: Run SSMS installer
      win_package:
        path: C:\Installers\SSMS-Setup-ENU.exe
        product_id: '{0955149F-98EC-4F44-8B05-7B0C8C503DCC}'
        arguments: /Quiet /norestart
        state: present

    - name: Install Failover Clustering feature to form AlwaysOn AG
      win_feature:
        name: Failover-Clustering
        state: present
      register: cluster_feature

    - name: Install Failover Clustering management tools
      win_feature:
        name: RSAT-Clustering
        state: present
      register: cluster_rsat_feature

    - name: Install Failover Clustering PowerShell management tools
      win_feature:
        name: RSAT-Clustering-PowerShell
        state: present

    - name: Install Failover Clustering command line interface
      win_feature:
        name: RSAT-Clustering-CmdInterface
        state: present

    - name: Install DSC module for Windows Cluster management
      win_psmodule:
        name: xFailOverCluster
        state: present

    - name: Reboot after installing clustering feature
      win_reboot:
      when: cluster_feature.reboot_required

    - name: Create the server cluster
      win_dsc:
        resource_name: xCluster
        Name: dbcluster
        StaticIpAddress: "{{ network_subnet }}.{{ dbcluster_address }}/24"
        DomainAdministratorCredential_username: "Administrator@{{ domain_name }}"
        DomainAdministratorCredential_password: "{{ domain_admin_password }}"
      run_once: yes

    - name: Wait for cluster creation to complete
      win_dsc:
        resource_name: xWaitForCluster
        Name: dbcluster

    - name: Join additional nodes to cluster
      win_dsc:
        resource_name: xCluster
        Name: dbcluster
        StaticIpAddress: "{{ network_subnet }}.{{ dbcluster_address }}/24"
        DomainAdministratorCredential_username: "Administrator@{{ domain_name }}"
        DomainAdministratorCredential_password: "{{ domain_admin_password }}"

    - name: Add file share witness to cluster
      win_dsc:
        resource_name: xClusterQuorum
        IsSingleInstance: 'Yes'
        Type: NodeAndFileShareMajority
        Resource: \\{{ groups['file_shares'] | first }}.{{ domain_name }}\witness
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

- hosts: domain_controllers
  name: Grant Database cluster VCO permissions
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_connection: winrm
    ansible_user: Administrator
    ansible_password: "{{ win_local_password }}"
    ansible_winrm_transport: ntlm
    ansible_port: 5985
  tasks:
    - name: Grant DB cluster VCO child creation permission on database OU
      win_dsc:
        resource_name: ADObjectPermissionEntry
        IdentityReference: '{{ domain_first_name }}\dbcluster$'
        Path: "{{ server_ou }}"
        ActiveDirectoryRights:
          - 'CreateChild'
        AccessControlType: Allow
        ActiveDirectorySecurityInheritance: All
        ObjectType: 'bf967a86-0de6-11d0-a285-00aa003049e2'
        InheritedObjectType: '00000000-0000-0000-0000-000000000000'
        Ensure: Present
      run_once: yes

- hosts: databases
  name: Configure SQL Servers
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_connection: winrm
    ansible_user: Administrator@{{ domain_name }}
    ansible_password: "{{ domain_admin_password }}"
    ansible_winrm_transport: credssp
    ansible_port: 5985
  any_errors_fatal: yes
  tasks:
    - name: Enable SQL AlwaysON
      win_dsc:
        resource_name: SqlAlwaysOnService
        Ensure: Present
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Add permissions to database service account
      win_dsc:
        resource_name: SqlPermission
        Ensure: Present
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        Principal: '{{ domain_name.split(".") | first }}\dbsvc'
        Permission:
          - AlterAnyAvailabilityGroup
          - ViewServerState
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Add cluster service logon
      win_dsc:
        resource_name: SqlLogin
        Ensure: Present
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        LoginType: WindowsUser
        Name: "NT SERVICE\\ClusSvc"
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Grant cluster service needed permissions
      win_dsc:
        resource_name: SqlPermission
        Ensure: Present
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        Principal: "NT SERVICE\\ClusSvc"
        Permission:
          - AlterAnyAvailabilityGroup
          - ViewServerState

    - name: Create AlwaysOn endpoint
      win_dsc:
        resource_name: SqlEndpoint
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        EndpointName: HADR
        EndpointType: DatabaseMirroring
        Port: 5022
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Give database service account CONNECT permission to endpoint
      win_dsc:
        resource_name: SqlEndpointPermission
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        Name: HADR
        Principal: '{{ domain_name.split(".") | first }}\dbsvc'
        Permission: CONNECT
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Create AlwaysOn availability group
      win_dsc:
        resource_name: SqlAG
        Ensure: Present
        InstanceName: "{{ db_instance }}"
        ServerName: "{{ inventory_hostname }}"
        Name: MainAG
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      run_once: yes

    - name: Wait for availability group creation
      win_dsc:
        resource_name: SqlWaitForAG
        Name: MainAG
        InstanceName: "{{ db_instance }}"
        RetryIntervalSec: 20
        RetryCount: 30
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      when: inventory_hostname == (groups['databases'] | first)

    - name: Create database owner accounts
      win_dsc:
        resource_name: SqlLogin
        Ensure: Present
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        LoginType: SqlLogin
        Name: "{{ item.owner_username }}"
        LoginCredential_username: "{{ item.owner_username }}"
        LoginCredential_password: "{{ database_password }}"
        LoginMustChangePassword: no
        LoginPasswordExpirationEnabled: no
        LoginPasswordPolicyEnforced: no
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      loop: "{{ databases }}"
      loop_control:
        label: "{{ item.owner_username }}"

    - name: Add replicas to availability group
      win_dsc:
        resource_name: SqlAGReplica
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        Name: "{{ inventory_hostname }}\\{{ db_instance }}"
        AvailabilityGroupName: MainAG
        FailoverMode: Automatic
        AvailabilityMode: SynchronousCommit
        PrimaryReplicaServerName: "{{ groups['databases'] | first }}"
        PrimaryReplicaInstanceName: "{{ db_instance }}"
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
          #when: inventory_hostname != groups['databases'] | first

    - name: Add availability group listener
      win_dsc:
        resource_name: SqlAGListener
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        Ensure: Present
        AvailabilityGroup: MainAG
        Name: MainAG
        IPAddress: "{{ network_subnet }}.{{ db_listener_address }}/255.255.255.0"
        Port: 5301
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      run_once: yes

    - name: Create database on primary node
      win_dsc:
        resource_name: SqlDatabase
        Ensure: Present
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        Name: "{{ item.name }}"
        RecoveryModel: Full
      loop: "{{ databases }}"
      loop_control:
        label: "{{ item.name }}"
      run_once: yes

    - name: Add databases to availability group
      win_dsc:
        resource_name: SqlAgDatabase
        Ensure: Present
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        AvailabilityGroupName: MainAG
        BackupPath: \\{{ groups['file_shares'] | first }}.{{ domain_name }}\backups
        DatabaseName: "{{ item.name }}"
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      loop: "{{ databases }}"
      loop_control:
        label: "{{ item.owner_username }}"
      run_once: yes

    - name: Set database accounts as dbowners
      win_dsc:
        resource_name: SqlDatabaseOwner
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        DatabaseName: "{{ item.name }}"
        Name: "{{ item.owner_username }}"
      loop: "{{ databases }}"
      loop_control:
        label: "{{ item.owner_username }}"
      run_once: yes

    - name: Add users to built-in databases
      win_dsc:
        resource_name: SqlDatabaseUser
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        DatabaseName: "{{ item.name }}"
        Name: "{{ item.username }}"
        UserType: Login
        LoginName: "{{ item.username }}"
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      loop: "{{ builtin_databases }}"

    - name: Set permissions to built-in databases
      win_dsc:
        resource_name: SqlDatabaseRole
        ServerName: "{{ inventory_hostname }}"
        InstanceName: "{{ db_instance }}"
        DatabaseName: "{{ item.name }}"
        Name: "{{ item.role }}"
        MembersToInclude:
          - "{{ item.username }}"
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      loop: "{{ builtin_databases }}"
