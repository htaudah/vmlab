# Playbook to create all CIFS, DFS, and NFS file shares needed in the environment. All file
# shares will contain the same content, whether or not the content is intended to be used in
# a DFS share.
# Written by: Hani Audah <ht.aramco@gmail.com>
# Created on: Jun/24/2020
# -------------------------------------------------------------------------------------------------
- import_playbook: allocate_host_variables.yml

- hosts: windows:&file_shares
  name: Prepare Windows file share servers
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
  vars:
    ansible_connection: winrm
    ansible_user: Administrator
    ansible_password: "{{ win_local_password }}"
    ansible_winrm_transport: ntlm
    ansible_port: 5985
  tasks:
    - include_tasks: join_domain.yml
      vars:
        machine_ou: "{{ server_ou }}"

    - name: Install DFS replication service
      win_feature:
        name:
          - FS-DFS-Replication
        state: present

    - name: Create directories for file shares
      win_file:
        path: C:\shares\{{ item.path }}
        state: directory
      loop: "{{ win_shared_folders }}"

    - win_share:
        name: "{{ item.name }}"
        description: "{{ item.description }}"
        path: C:\shares\{{ item.path }}
        full: "{{ item.full }}"
      loop: "{{ win_shared_folders }}"

    - name: Create file share subdirectories
      win_file:
        path: C:\shares\{{ item[1].path }}\{{ item[0].subfolder }}
        state: directory
      when: (item[0].share == item[1].name) and (item[0].subfolder is defined)
      loop: "{{ share_downloads | product(win_shared_folders) | list }}"

    - name: Populate shares with web files
      win_get_url:
        url: "{{ item[0].url }}"
        dest: C:\shares\{{ item[1].subfolder | default('') }}\{{ item[1].path }}
      when: item[0].share == item[1].name
      # perform Cartesian product then filter out invalid pairs
      loop: "{{ share_downloads | product(win_shared_folders) | list }}"

- hosts: windows:&distributed_file_shares
  name: Prepare Windows DFS servers
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
  vars:
    ansible_connection: winrm
    ansible_user: Administrator
    ansible_password: "{{ win_local_password }}"
    ansible_winrm_transport: ntlm
    ansible_port: 5985
  tasks:
    - include_tasks: join_domain.yml
      vars:
        machine_ou: "{{ server_ou }}"

    - name: Install DFS prerequisite features
      win_feature:
        name:
          - RSAT-DFS-Mgmt-Con
          - FS-DFS-Namespace
          - FS-DFS-Replication
        state: present

    - name: Install DFS DSC module
      win_psmodule:
        name: DFSDsc
        state: present

    - name: Create directory for namespace root
      win_file:
        path: C:\DFSRoots\Shares
        state: directory

    - name: Create share for namespace root
      win_share:
        name: Shares
        description: DFS namespace root for all domain DFS shares
        path: C:\DFSRoots\Shares
        full: Administrator
        read: Domain Users@{{ domain_name }}

    - name: Create DFS namespace
      win_dsc:
        resource_name: DFSNamespaceRoot
        Path: \\{{ domain_name }}\Shares
        TargetPath: \\{{ inventory_hostname }}.{{ domain_name }}\Shares
        Ensure: Present
        Type: DomainV2
        Description: AD Domain based DFS namespace for all shares
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Create DFS folders
      win_dsc:
        resource_name: DFSNamespaceFolder
        Path: \\{{ domain_name }}\Shares\{{ item[0].name }}
        # Each folder has targets pointing to all file share servers
        TargetPath: \\{{ item[1] }}.{{ domain_name }}\{{ item[0].name }}
        Ensure: Present
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      loop: "{{ win_shared_folders | selectattr('cluster', 'equalto', true) | product(groups['file_shares']) | list }}"

    - name: Enable DFS replication on all DFS shares
      win_dsc:
        resource_name: DFSReplicationGroup
        GroupName: Shares
        Ensure: Present
        Members: "{{ groups['file_shares'] | map('regex_replace', '(.*)', '\\1.' + domain_name) | list }}"
        Folders: "{{ win_shared_folders | selectattr('cluster', 'equalto', true) | map(attribute='name') | list }}"
        Topology: Fullmesh
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"

    - name: Add member to replication group
      win_dsc:
        resource_name: DFSReplicationGroupMembership
        GroupName: Shares
        FolderName: "{{ item[0].name }}"
        ComputerName: "{{ item[1] }}"
        ContentPath: C:\shares\{{ item[0].path }}
        PrimaryMember: "{{ item[1] == groups['file_shares'] | first }}"
        PsDscRunAsCredential_username: "Administrator@{{ domain_name }}"
        PsDscRunAsCredential_password: "{{ domain_admin_password }}"
      loop: "{{ win_shared_folders | selectattr('cluster', 'equalto', true) | product(groups['file_shares']) | list }}"
