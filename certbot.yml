# Playbook to configure a machine for certificate generation and use it to generate all the
# needed environment SSL certificates. certbot is used for the entire process, with DNS
# as the validation mechanism. This means that (i) Let's Encrypt is used as the CA and
# (ii) that DNS validation is used.
# Written by: Hani Audah <ht.aramco@gmail.com>
# Created on: Jun/01/2020
# -------------------------------------------------------------------------------------------------
- hosts: localhost
  connection: local
  name: Create certificate directories on control node
  vars_files:
    - "{{ playbook_dir }}/passwords.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  tasks:
    - name: Create certificate directories
      file:
        path: /var/certs/{{ item.subject }}.{{ domain_name }}
        state: directory
      loop: "{{ certificates }}"

- hosts: haudah-certbot
  name: Create certbot server, generate necessary certificates, and distribute them
  vars_files:
    - "{{ playbook_dir }}/passwords.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_user: root
    ansible_password: "{{ linux_local_password }}"
  tasks:
    - name: Install certbot
      dnf:
        name: certbot
        state: present

    - name: Install Route 53 python package
      pip:
        name: certbot_dns_route53

    - name: Ensure AWS config directory exists
      file:
        path: /root/.aws
        state: directory

    - name: Transfer AWS access config
      template:
        src: configurations/aws_config
        dest: /root/.aws/config

    # Certificate generation command will do nothing if certificate is not up for renewal
    - name: Run certbot command for certificates that were not created
      shell: certbot certonly --preferred-challenges=dns -d {{ item.subject }}.{{ domain_name }} --agree-tos --email {{ dns_email }} --non-interactive --dns-route53
      loop: "{{ certificates }}"

    - name: Copy certificates to control node
      fetch:
        src: /etc/letsencrypt/live/{{ item.subject }}.{{ domain_name }}/fullchain.pem
        dest: /var/certs/{{ item.subject}}.{{ domain_name }}/
        flat: yes
      loop: "{{ certificates }}"

    - name: Copy private keys to control node
      fetch:
        src: /etc/letsencrypt/live/{{ item.subject }}.{{ domain_name }}/privkey.pem
        dest: /var/certs/{{ item.subject}}.{{ domain_name }}/
        flat: yes
      loop: "{{ certificates }}"

- hosts: "{{ certificates | map(attribute='destination_host') | list }}"
  vars_files:
    - "{{ playbook_dir }}/passwords.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  vars:
    ansible_user: root
    ansible_password: "{{ linux_local_password }}"
  tasks:
    - name: Make sure intended destinations exist
      file:
        path: "{{ item.destination_path }}"
        state: directory

    - name: Copy certificates to intended destination
      copy:
        src: "/var/certs/{{ item.subject }}.{{ domain_name }}"
        dest: "{{ item.destination_path }}"
      when: inventory_hostname == item.destination_host
      loop: "{{ certificates }}"
