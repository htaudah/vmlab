#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    #option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend ssl_passthrough
    mode tcp
    bind *:8443,*:8444
    acl uagr_port dst_port 8443
    acl uage_port dst_port 8444
    use_backend http_uagr_backend if uagr_port
    use_backend http_uage_backend if uage_port
    default_backend http_uage_backend

frontend ssl_terminating
    mode http
    bind *:443,*:2001 ssl crt /var/lib/haproxy/certificates
    acl awcm_port dst_port 2001
    #bind *:9443 ssl crt /var/lib/haproxy/balancer_cert.pem
    #use_backend mailbox_servers if { req.hdr(Host) -i -m reg owa.{{ domain_name }} }
    use_backend http_uem_console if { req.hdr(Host) -i -m reg uemc.{{ domain_name }} }
    use_backend http_awcm if awcm_port
    use_backend http_uem_device_services if { req.hdr(Host) -i -m reg uds.{{ domain_name }} }
    use_backend http_vdi if { req.hdr(Host) -i -m reg vdi.{{ domain_name }} }
    use_backend http_access if { req.hdr(Host) -i -m reg access.{{ domain_name }} }
    #use_backend http_tunnel_relays if { req.hdr(Host) -i -m reg uagr.{{ domain_name }} }
    #use_backend http_tunnel_relays if { req.hdr(Host) -i -m reg uagr.{{ domain_name }} }
    #use_backend http_tunnel_endpoints if { req.hdr(Host) -i -m reg uage.{{ domain_name }} }
    #use_backend http_vidm_endpoints if { req.hdr(Host) -i -m reg vidm.{{ domain_name }} }
    default_backend http_uem_device_services

#backend mailbox_servers
    #mode http
    #balance roundrobin
    #server mailbox1 192.168.1.222:443 check fall 3 rise 6 inter 2m ssl verify none
    #server mailbox2 192.168.1.223:443 check fall 3 rise 6 inter 2m ssl verify none
    #option httpchk GET /owa/healthcheck.htm

#frontend relay_frontend
    #mode tcp
    #option tcplog
    #timeout client 5m
    #bind *:8443
    #bind *:8444
    #use_backend tunnel_relays if { dst_port 8443 }
    #use_backend tunnel_endpoints if { dst_port 8444 }
    #default_backend tunnel_endpoints

backend http_uem_console
    balance leastconn
    cookie SERVERPERSIST insert indirect nocache
    {% for host in groups['uem_console_servers'] %}
        server {{ host }} {{ network_subnet }}.{{ hostvars[host]['host_address'] }} check inter 5s ssl verify none cookie {{ host }}
    {% endfor %}
    option httpchk HEAD /airwatch/awhealth/v1

backend http_uem_device_services
    balance leastconn
    stick-table type ip size 1m expire 20m
    stick match src
    stick store-request src
    {% for host in groups['uem_ds_servers'] %}
        server {{ host }} {{ network_subnet }}.{{ hostvars[host]['host_address'] }} check inter 5s ssl verify none cookie {{ host }}
    {% endfor %}
    option httpchk HEAD /deviceservices/awhealth/v1

backend http_vdi
    balance leastconn
    cookie SERVERPERSIST insert indirect nocache
    {% for host in groups['horizon_connection_servers'] %}
        server {{ host }} {{ network_subnet }}.{{ hostvars[host]['host_address'] }} check ssl verify none cookie {{ host }}
    {% endfor %}

backend http_access
    balance leastconn
    cookie SERVERPERSIST insert indirect nocache
    {% for host in groups['access'] %}
        server {{ host }} {{ network_subnet }}.{{ hostvars[host]['host_address'] }} check ssl verify none cookie {{ host }}
    {% endfor %}
    option httpchk GET /SAAS/API/1.0/REST/system/health/heartbeat

backend http_awcm
    balance hdr(awcmsessionid)
    hash-type consistent
    {% for host in groups['uem_ds_servers'] %}
        server {{ host }} {{ network_subnet }}.{{ hostvars[host]['host_address'] }} check
    {% endfor %}

backend http_uagr_backend
    mode tcp
    balance leastconn
    stick-table type ip size 1m expire 20m
    stick match src
    stick store-request src
    {% for host in groups['uem_tunnel_relay'] %}
        server {{ host }} {{ network_subnet }}.{{ hostvars[host]['host_address'] }} check ssl verify none
    {% endfor %}
    option httpchk GET /favicon.ico

backend http_uage_backend
    mode tcp
    balance leastconn
    stick-table type ip size 1m expire 20m
    stick match src
    stick store-request src
    {% for host in groups['uem_tunnel_endpoint'] %}
        server {{ host }} {{ network_subnet }}.{{ hostvars[host]['host_address'] }} check ssl verify none
    {% endfor %}
    option httpchk GET /favicon.ico
