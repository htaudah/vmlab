#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    #option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend ssl_terminating
    mode http
    bind *:443 ssl crt /var/lib/haproxy/balancer_cert.pem
    bind *:9443 ssl crt /var/lib/haproxy/balancer_cert.pem
    use_backend mailbox_servers if { req.hdr(Host) -i -m reg owa.haramco.xyz }
    use_backend http_tunnel_relays if { req.hdr(Host) -i -m reg uagr.haramco.xyz }
    use_backend http_tunnel_endpoints if { req.hdr(Host) -i -m reg uage.haramco.xyz }
    use_backend http_vidm_endpoints if { req.hdr(Host) -i -m reg vidm.haramco.xyz }
    default_backend mailbox_servers

backend mailbox_servers
    mode http
    balance roundrobin
    server mailbox1 192.168.1.222:443 check fall 3 rise 6 inter 2m ssl verify none
    server mailbox2 192.168.1.223:443 check fall 3 rise 6 inter 2m ssl verify none
    option httpchk GET /owa/healthcheck.htm

frontend relay_frontend
    mode tcp
    option tcplog
    timeout client 5m
    bind *:8443
    bind *:8444
    use_backend tunnel_relays if { dst_port 8443 }
    use_backend tunnel_endpoints if { dst_port 8444 }
    default_backend tunnel_endpoints

backend http_tunnel_relays
    balance leastconn
    server uagr1 192.168.1.171 check ssl verify none

backend http_tunnel_endpoints
    balance leastconn
    server uage1 192.168.1.172 check ssl verify none

backend tunnel_relays
    mode tcp
    option tcplog
    balance leastconn
    server uagr1 192.168.1.171 check

backend tunnel_endpoints
    mode tcp
    option tcplog
    balance leastconn
    server uage1 192.168.1.172 check

backend http_vidm_endpoints
    mode http
    balance leastconn
    server vidm1 192.168.1.177 check ssl verify none
    option httpchk GET /SAAS/API/1.0/REST/system/health/heartbeat
