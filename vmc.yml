# Playbook to prepare all network and firewall related rules on VMC for this lab deployment
# Written by: Hani Audah <ht.aramco@gmail.com>
# Created on: Jul/02/2021
# -------------------------------------------------------------------------------------------------
- import_playbook: allocate_host_variables.yml

- hosts: localhost
  connection: local
  name: Prepare VMC network
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  tasks:
    - name: Get access token
      uri:
        url: https://console.cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize?refresh_token={{ vmc_api_token }}
        method: POST
        validate_certs: no
        headers:
          Accept: application/json
      register: access_token_response

    - name: Get org ID
      uri:
        url: https://vmc.vmware.com/vmc/api/orgs
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: org_response

    - name: Get SDDC ID
      uri:
        url: https://vmc.vmware.com/vmc/api/orgs/{{ org_response.json | json_query(filter_org_id) }}/sddcs
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: sddc_response
      vars:
        filter_org_id: "[? display_name=='{{ vmc_org_name }}'].id | [0]"

    - set_fact:
        nsx_public_url: "{{ sddc_response.json | json_query(filter_nsx_url) }}"
      vars:
        filter_nsx_url: "[? name=='{{ vmc_sddc_name }}'].resource_config.nsx_api_public_endpoint_url | [0]"

    - name: Get NSX Segments
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/tier-1s/cgw/segments"
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: segments_response

    - set_fact:
        segment_exists: no

    - set_fact:
        segment_exists: yes
      when: "{{ segments_response.json.results | json_query(filter_segment) }}"
      vars:
        filter_segment: "[? id=='{{ network_name }}'].subnets[] | [? network=='{{ network_subnet }}.0/24']"

    - set_fact:
        segment_taken: no

    - set_fact:
        segment_taken: yes
      when: "{{ item | ansible.netcommon.network_in_usable(network_gateway) }}"
      loop: "{{ segments_response | regex_findall('\\d+\\.\\d+\\.\\d+\\.\\d+/\\d{2}') }}"
      no_log: yes

    - name: Fail if network segment was created manually
      fail:
        msg: A network segment exists for the specified subnet, but was created manually
      when: segment_taken and not segment_exists

    - name: Create the network segment
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/tier-1s/cgw/segments/{{ network_name }}"
        method: PUT
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
        body: >
          {
            "display_name":"{{ network_name }}",
            "subnets": [
              {
                "gateway_address":"{{ network_gateway }}/24"
              }
            ]
          }
        body_format: json
      when: not segment_exists

    - name: Get Public IPs
      uri:
        url: "{{ nsx_public_url | regex_replace('sks-nsxt-manager', 'cloud-service') }}/api/v1/infra/public-ips"
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: public_ips_response

    - name: Get existing public IPs
      set_fact:
        existing_public_ips: "{{ existing_public_ips | default({}) | combine({ item: public_ips_response | json_query(filter_public_ip) }) }}"
      vars:
        filter_public_ip: "[? id=='{{ userid }}_{{ item }}'].ip | [? network=='{{ network_subnet }}.0/24']"
      loop: "{{ public_ips }}"

    - name: Create public IPs
      uri:
        url: "{{ nsx_public_url | regex_replace('sks-nsxt-manager', 'cloud-service') }}/api/v1/infra/public-ips/{{ userid }}_{{ item }}"
        method: PUT
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
        body: >
          {
            "id":"{{ userid }}_{{ item }}",
            "display_name":"{{ userid }}_{{ item }}",
          }
        body_format: json
      when: existing_public_ips[item] is none
      loop: "{{ public_ips }}"
      register: create_public_ips_response

    - name: Append created IPs to existing public IPs
      set_fact:
        existing_public_ips: "{{ existing_public_ips | default({}) | combine({ item.item: item.json.ip }) }}"
      loop: "{{ create_public_ips_response.results }}"
      no_log: yes

    - name: Get NAT rules
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/tier-1s/cgw/nat/USER/nat-rules"
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: nat_response

    - name: Create NAT rules
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/tier-1s/cgw/nat/USER/nat-rules/{{ userid }}_all_in_one"
        method: PATCH
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
        body: >
          {
            "display_name":"{{ userid }}_all_in_one",
            "action":"DNAT",
            "destination_network":"{{ existing_public_ips['all_in_one'] }}",
            "service":"",
            "translated_network":"{{ network_subnet }}.{{ virtual_ips['all_in_one'] }}",
            "firewall_match":"MATCH_EXTERNAL_ADDRESS",
            "logging":"false",
            "enabled":"true",
            "sequence_number":0
          }
        body_format: json
      when: (nat_response | json_query(filter_nat)) is none
      vars:
        filter_nat: "[? id=='{{ userid }}_all_in_one']"

    - name: Get CGW Firewall Groups
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/domains/cgw/groups"
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: cgw_groups_response

    - name: Create CGW Firewall Groups
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/domains/cgw/groups/{{ item.name }}"
        method: PUT
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
        body: >
          {
            "display_name":"{{ item.name }}",
            "expression": [
              {
                "resource_type":"IPAddressExpression",
                "ip_addresses":["{{ item.ip_addresses | join(',') }}"],
              }
            ]
          }
        body_format: json
      when: (cgw_groups_response.json.results | json_query(filter_cgw_groups)) is none
      vars:
        filter_cgw_groups: "[? id=='{{ item.name }}']"
      loop: "{{ gateway_firewall_groups }}"

    - name: Get Firewall Services
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/services"
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: firewall_services_response

    - name: Create non-existent firewall services
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/services/{{ item.name }}"
        method: PUT
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
        body: >
          {
            "display_name":"{{ item.name }}",
            "service_entries": [
              {
                "resource_type":"L4PortSetServiceEntry",
                "display_name":"{{ item.name }}_entry",
                "destination_ports": [
                  {{ item.port }}
                ],
                "l4_protocol":"{{ item.protocol }}"
              }
            ]
          }
        body_format: json
      when: (firewall_services_response.json | json_query(filter_firewall_services)) is none
      vars:
        filter_firewall_services: "[? id=='{{ item.name }}']"
      loop: "{{ firewall_services }}"

    - name: Get CGW Firewall Rules
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/domains/cgw/gateway-policies/default"
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: cgw_rules_response

    - name: Create non-existent firewall rules
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/domains/cgw/gateway-policies/default/rules/{{ item.name }}"
        method: PUT
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
        body: >
          {
            "display_name":"{{ item.name }}",
            "action":"ALLOW",
            "resource_type":"Rule",
            "sequence_number":0,
            "source_groups": [
              "ANY"
            ],
            "logged":false,
            "destination_groups": [
              "/infra/domains/cgw/groups/{{ item.destination_group }}"
            ],
            "path":"/infra/domains/cgw/gateway-policies/default/rules/{{ item.name }}",
            "scope": [
              "/infra/labels/cgw-all"
            ],
            "services": [
              "/infra/services/{{ item.service }}"
            ]
          }
        body_format: json
      when: (cgw_rules_response | json_query(filter_cgw_rules)) is none
      vars:
        filter_cgw_rules: "[? id=='{{ item.name }}']"
      loop: "{{ gateway_firewall_rules }}"
