- import_playbook: allocate_host_variables.yml

- hosts: localhost
  connection: local
  name: Prepare VMC network
  vars_files:
    - "{{ playbook_dir }}/vault.yml"
    - "{{ playbook_dir }}/strings.yml"
    - "{{ playbook_dir }}/customizations.yml"
  tasks:
    - name: Get access token
      uri:
        url: https://console.cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize?refresh_token={{ vmc_api_token }}
        method: POST
        validate_certs: no
        headers:
          Accept: application/json
      register: access_token_response

    - name: Get org ID
      uri:
        url: https://vmc.vmware.com/vmc/api/orgs
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: org_response

    - name: Get SDDC ID
      uri:
        url: https://vmc.vmware.com/vmc/api/orgs/{{ org_response.json | json_query(filter_org_id) }}/sddcs
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: sddc_response
      vars:
        filter_org_id: "[? display_name=='{{ vmc_org_name }}'].id | [0]"

    - set_fact:
        nsx_public_url: "{{ sddc_response.json | json_query(filter_nsx_url) }}"
      vars:
        filter_nsx_url: "[? name=='{{ vmc_sddc_name }}'].resource_config.nsx_api_public_endpoint_url | [0]"

    - name: Get NSX Segments
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/tier-1s/cgw/segments"
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: segments_response

    - set_fact:
        segment_exists: no

    - set_fact:
        segment_exists: yes
      when: "{{ segments_response.json.results | json_query(filter_segment) }}"
      vars:
        filter_segment: "[? id=='{{ network_name }}'].subnets[] | [? network=='{{ network_subnet }}.0/24']"

    - set_fact:
        segment_taken: no

    - set_fact:
        segment_taken: yes
      when: "{{ item | ansible.netcommon.network_in_usable(network_gateway) }}"
      loop: "{{ segments_response | regex_findall('\\d+\\.\\d+\\.\\d+\\.\\d+/\\d{2}') }}"

    - name: Fail if network segment was created manually
      fail:
        msg: A network segment exists for the specified subnet, but was created manually
      when: segment_taken and not segment_exists

    - name: Create the network segment
      uri:
        url: "{{ nsx_public_url }}/policy/api/v1/infra/tier-1s/cgw/segments/{{ network_name }}"
        method: PUT
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
        body: >
          {
            "display_name":"{{ network_name }}",
            "subnets": [
              {
                "gateway_address":"{{ network_gateway }}/24"
              }
            ]
          }
        body_format: json
      when: not segment_exists

    - name: Get Public IPs
      uri:
        url: "{{ nsx_public_url | regex_replace('sks-nsxt-manager', 'cloud-service') }}/api/v1/infra/public-ips"
        method: GET
        validate_certs: no
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
      register: public_ips_response

    - name: Get existing public IPs
      set_fact:
        existing_public_ips: "{{ existing_public_ips | default({}) | combine({ item: public_ips_response | json_query(filter_public_ip) }) }}"
      vars:
        filter_public_ip: "[? id=='{{ userid }}_{{ item }}'].ip | [? network=='{{ network_subnet }}.0/24']"
      loop: "{{ public_ips }}"

    - name: Create public IPs
      uri:
        url: "{{ nsx_public_url | regex_replace('sks-nsxt-manager', 'cloud-service') }}/api/v1/infra/public-ips/{{ userid }}_{{ item }}"
        method: PUT
        headers:
          csp-auth-token: "{{ access_token_response.json.access_token }}"
        body: >
          {
            "id":"{{ userid }}_{{ item }}",
            "display_name":"{{ userid }}_{{ item }}",
          }
        body_format: json
      when: existing_public_ips[item] is none
      loop: "{{ public_ips }}"
      register: create_public_ips_response

    - debug:
        msg: "{{ create_public_ips_response }}"
